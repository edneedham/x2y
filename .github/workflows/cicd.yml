name: CICD

on:
  workflow_dispatch:
  push:
    branches: [main]
    tags:
    - 'v*'
  pull_request:
    branches: [main]
    tags:
    - 'v*'

env:
  BIN: x2y
  DIR: artifacts
  GITHUB_REF: '${{ github.ref }}'
  CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}

jobs:
  lint_and_format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Check lints
      run: cargo clippy -- -D warnings

  test: 
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Run tests
      run: cargo test
    
  build:
    needs: [lint_and_format, test]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version number
      id: get_version
      shell: bash
      run: |
        echo "using version tag ${GITHUB_REF:10}"
        echo ::set-output name=version::"${GITHUB_REF:10}"

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install p7zip (MacOS)
      if: matrix.os == 'macos-latest'
      run: brew install p7zip

    - name: Build
      run: cargo build --release

    - name: Create artifact directory
      run: |
        mkdir ${{ env.DIR }}
        mkdir -p ${{ env.DIR }}/${{ env.BIN }}-${{ matrix.os }}-${{ steps.get_version.outputs.VERSION }}

    - name: Move binaries (Linux/MacOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        mv ./target/release/${{ env.BIN }} ${{ env.DIR}}/${{ env.BIN }}-${{ matrix.os }}-${{ steps.get_version.outputs.VERSION }}/${{ env.BIN }}
        mv README.md LICENSE ./${{ env.DIR }}/${{ env.BIN }}-${{ matrix.os }}-${{ steps.get_version.outputs.VERSION }}

    - name: Move binaries (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        cp ./target/release/${{ env.BIN }}.exe ./${{ env.DIR }}/${{ env.BIN }}-${{ matrix.os }}-${{ steps.get_version.outputs.VERSION }}/${{ env.BIN }}.exe
        mv README.md LICENSE ./${{ env.DIR }}/${{ env.BIN }}-${{ matrix.os }}-${{steps.get_version.outputs.VERSION }} 
    
    - name: Create tarball
      shell: bash
      run: 7z a -ttar -so -an ./${{ env.DIR }}/${{ env.BIN }}-${{ matrix.os }}-${{ steps.get_version.outputs.VERSION }} | 7z a -si ./${{ env.DIR }}/${{ env.BIN }}-${{ matrix.os }}-${{ steps.get_version.outputs.VERSION }}.tar.gz

    - name: Upload zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}
        path: ./${{ env.DIR }}

  publish:
    needs: [lint_and_format, test]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish binary crate 
      run: cargo publish --token ${{ env.CRATES_TOKEN }}

  release:
    name: GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ steps.get_version.outputs.VERSION }}

      - name: Download Linux tarball
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest

      - name: Download MacOS tarball
        uses: actions/download-artifact@v3
        with:
          name: macos-latest

      - name: Download Windows tarball
        uses: actions/download-artifact@v3
        with:
          name: windows-latest

      - name: Release Tarballs
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.BIN }}-ubuntu-latest-${{ steps.get_version.outputs.VERSION }}.tar.gz 
            ${{ env.BIN }}-macos-latest-${{ steps.get_version.outputs.VERSION }}.tar.gz
            ${{ env.BIN }}-windows-latest-${{ steps.get_version.outputs.VERSION }}.tar.gz
